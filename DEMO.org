Install environment.

#+BEGIN_SRC shell
docker build -f cmd/admission/Dockerfile -t network-attachment-definition-pod-admission .
./dind-cluster.sh down
./dind-cluster.sh up
export PATH=${PWD}/.kubeadm-dind-cluster:${PATH}
kubectl get nodes
./dind-cluster.sh copy-image network-attachment-definition-pod-admission
cat <<EOF | kubectl create -f -
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: network-attachment-definitions.k8s.cni.cncf.io
spec:
  group: k8s.cni.cncf.io
  version: v1
  scope: Namespaced
  names:
    plural: network-attachment-definitions
    singular: network-attachment-definition
    kind: NetworkAttachmentDefinition
    shortNames:
    - net-attach-def
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            config:
              type: string
EOF
#+END_SRC

Create a network.

#+BEGIN_SRC yaml
cat <<EOF | kubectl create -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: ovs-conf
spec:
  config: '{
      "cniVersion": "0.3.1",
      "type": "ovs",
      "bridge": "br1",
      "vlan": 100
    }'
EOF
#+END_SRC

Create dedicated namespace.

#+BEGIN_SRC shell
kubectl apply -f _out/namespace.yml
#+END_SRC

Install 

#+BEGIN_SRC shell
./hack/create-signed-cert.sh --app foo
CA_BUNDLE=$(kubectl get configmap -n kube-system extension-apiserver-authentication -o=jsonpath='{.data.client-ca-file}' | base64 | tr -d '\n')
./hack/render-manifests.sh --app foo --ca-bundle $CA_BUNDLE --image network-attachment-definition-pod-admission
kubectl apply -f _out/
#+END_SRC

Create webhook configuration.

#+BEGIN_SRC yaml
cat <<EOF | kubectl create -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: foo-conf
  namespace: foo-ns
data:
  config.yml: |
    rules:
    - type: ovs
      patch: |
        [
          {
            "op": "add",
            "path": "/spec/containers/0/resources/limits",
            "value": {"bridge.ovs-cni.kubevirt.io/{{ .Config.bridge }}": 1}
          }
        ]
EOF
#+END_SRC

Create a pod.

#+BEGIN_SRC yaml
cat <<EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: samplepod
  annotations:
    k8s.v1.cni.cncf.io/networks: ovs-conf
spec:
  containers:
  - name: samplepod
    command: ["/bin/bash", "-c", "sleep 2000000000000"]
    image: dougbtv/centos-network
EOF
#+END_SRC

Show logs.

#+BEGIN_SRC shell
pod=$(kubectl get pod -n foo-ns -o jsonpath="{.items[0].metadata.name}")
kubectl -n foo-ns logs $pod
#+END_SRC

Show the pod.

#+BEGIN_SRC shell
kubectl get pods samplepod -o yaml
#+END_SRC
